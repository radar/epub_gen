#!/usr/bin/env ruby

require 'epub_gen'
require 'zip'
require 'pathname'
require 'pry'

Zip.default_compression = Zlib::BEST_COMPRESSION
Zip::File.open('book.epub', Zip::File::CREATE) do |zipfile|
  # input_filenames.each do |filename|
  #   # Two arguments:
  #   # - The name of the file as it will appear in the archive
  #   # - The original file, including the path to find it
  #   zipfile.add(filename, File.join(folder, filename))
  # end

  uuid = SecureRandom.hex(16)

  book = EpubGen::Book.new(path: ARGV[0], uuid: "unique-id")

  zipfile.add_stored("mimetype", "mimetype")

  zipfile.get_output_stream("OEBPS/package.opf") { |f| f.write book.package.generate }
  zipfile.get_output_stream("OEBPS/toc.ncx") { |f| f.write book.toc.generate }
  zipfile.get_output_stream("OEBPS/nav.xhtml") { |f| f.write book.nav.generate }
  zipfile.get_output_stream("META-INF/container.xml") { |f| f.write EpubGen::Container.new.generate }
  zipfile.add("META-INF/com.apple.ibooks.display-options.xml", "com.apple.ibooks.display-options.xml")
  zipfile.add("OEBPS/book.xhtml", "book/html/book.xhtml")

  book.images.each do |image|
    zipfile.add("OEBPS/#{image.relative_path}", image.path)
  end

  zipfile.add("OEBPS/title_page.xhtml", book.title_page)
  zipfile.add("OEBPS/cover.png", "book/cover.png")
  zipfile.add("OEBPS/style.css", "book/css/style.css")
  zipfile.add("OEBPS/fonts.css", "book/css/fonts.css")
  zipfile.add("OEBPS/pygments.css", "book/css/pygments.css")
  zipfile.add("OEBPS/titillium.ttf", "book/fonts/titillium.ttf")
  zipfile.add("OEBPS/titillium-bold.ttf", "book/fonts/titillium-bold.ttf")
  zipfile.add("OEBPS/CascadiaMono.ttf", "book/fonts/CascadiaMono.ttf")
end
